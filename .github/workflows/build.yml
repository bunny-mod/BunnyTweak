name: Build

on:
   workflow_dispatch:
    inputs:
        ipa_url:
            description: "Direct link to the decrypted IPA"
            default: ""
            required: true
            type: string

jobs:
  build-tweak:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download Tweak
        run: |
          set -e
          
          status_code=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/latest)
          if [ "$status_code" -ne 200 ]; then
            echo "No releases found or request failed"
            echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
            exit 0
          fi
          release_info=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          release_version=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("iphoneos-arm.deb")) | .name' | grep -o '_[0-9.]\+_' | tr -d '_')
          control_version=$(grep '^Version:' control | cut -d ' ' -f 2)
          if [ "$release_version" = "$control_version" ]; then
            echo "Versions match. Downloading DEB files..."
            echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".deb")) | .browser_download_url' | xargs -I {} curl -L -O {}
            echo "DEB_DOWNLOADED=true" >> $GITHUB_ENV
          else
            echo "Versions do not match. No files will be downloaded."
            echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
            exit 0
          fi
          
      - name: Check cache
        if: env.DEB_DOWNLOADED == 'false'
        run: echo upstream_heads=`git ls-remote https://github.com/theos/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

      - name: Use cache
        if: env.DEB_DOWNLOADED == 'false'
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/theos
          key: ${{ runner.os }}-${{ env.upstream_heads }}

      - name: Prepare Theos
        if: env.DEB_DOWNLOADED == 'false'
        uses: Randomblock1/theos-action@v1

      - name: Build packages
        if: env.DEB_DOWNLOADED == 'false'
        run: make package FINALPACKAGE=1 && make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless

      - name: Set DEB path
        run: |
          if [ "${{ env.DEB_DOWNLOADED }}" == "true" ]; then
            echo "DEB_PATH=${{ github.workspace }}/*-arm.deb" >> $GITHUB_ENV
            echo "ROOTLESS_DEB_PATH=${{ github.workspace }}/*-arm64.deb" >> $GITHUB_ENV
          else
            echo "DEB_PATH=${{ github.workspace }}/packages/*-arm.deb" >> $GITHUB_ENV
            echo "ROOTLESS_DEB_PATH=${{ github.workspace }}/packages/*-arm64.deb" >> $GITHUB_ENV
          fi

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ${{ env.DEB_PATH }}

      - name: Upload rootless package
        uses: actions/upload-artifact@v4
        with:
          name: rootless package
          path: ${{ env.ROOTLESS_DEB_PATH }}

  build-ipa:
    runs-on: ubuntu-latest
    needs: build-tweak

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Install dependencies
        run: sudo apt update && sudo apt install libplist-utils xmlstarlet libxml2-utils -y

      - name: Download and Unzip Orion
        run: |
          curl -L -o Orion.zip $(curl -s https://api.github.com/repos/theos/orion/releases/latest | jq -r '.assets[0].browser_download_url')
          unzip Orion.zip
      - name: Download Discord IPA
        run: |
          curl -L -o discord.ipa ${{ github.event.inputs.ipa_url }}
      - name: Make patcher directory
        run: mkdir patcher

      - name: Download IPA patcher
        working-directory: patcher
        run: |
          curl -L -o patcher https://github.com/amsyarasyiq/bunny-ipa-patcher/releases/download/release-pyon/patcher.linux-amd64
          chmod +x patcher

      - name: Download IPA icons
        working-directory: patcher
        run: |
          curl -L -o ipa-icons.zip https://raw.githubusercontent.com/pyoncord/assets/main/ipa-icons.zip

      - name: Extract Values
        run: |
          NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
          PACKAGE=$(grep '^Package:' control | cut -d ' ' -f 2)
          VERSION=$(grep '^Version:' control | cut -d ' ' -f 2)
          DEB_FILE_NAME="${PACKAGE}_${VERSION}_iphoneos-arm.deb"
          echo "DEB_FILE_NAME=$DEB_FILE_NAME" >> $GITHUB_ENV
          echo "APP_NAME=$NAME" >> $GITHUB_ENV

      - name: Inject tweak
        run: |
          mkdir -p ${{ github.workspace }}/build
          git clone https://github.com/Al4ise/Azule.git
          ./Azule/azule -i discord.ipa -o ${{ github.workspace }}/build -f $(find ${{ github.workspace }} -name 'dev.theos.orion14_*_iphoneos-arm.deb' | head -n 1) ${{ github.workspace }}/${{ env.DEB_FILE_NAME }}
          mv "${{ github.workspace }}/build/"*.ipa "${{ github.workspace }}/build/${{ env.APP_NAME }}.ipa"

      - name: Patch Discord
        working-directory: patcher
        run : |
          ./patcher \
            -d ${{ github.workspace }}/build/${{ env.APP_NAME }}.ipa \
            -o ${{ github.workspace }}/build/${{ env.APP_NAME }}.ipa \
            -i ./ipa-icons.zip
  
      - name: Upload ipa as artifact
        uses: actions/upload-artifact@v4
        with:
            name: ipa
            path: ${{ github.workspace }}/build/${{ env.APP_NAME }}.ipa
